apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose -f elk-docker-compose.yml convert --out deploy.yaml
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: elasticsearch
    name: elasticsearch
  spec:
    ports:
    - name: "9300"
      port: 9300
      targetPort: 9300
    - name: "9200"
      port: 9200
      targetPort: 9200
    selector:
      io.kompose.service: elasticsearch
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose -f elk-docker-compose.yml convert --out deploy.yaml
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: kibana
    name: kibana
  spec:
    ports:
    - name: "5601"
      port: 5601
      targetPort: 5601
    selector:
      io.kompose.service: kibana
  status:
    loadBalancer: {}
- apiVersion: v1
  data:
    mysql-logstash-password: YWRtaW4=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: mysql-logstash-password
    name: mysql-logstash-password
  type: Opaque
- apiVersion: v1
  data:
    elastic-password: YWRtaW4xMjM=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: elastic-password
    name: elastic-password
  type: Opaque
- apiVersion: v1
  data:
    elasticsearch-kibana-user: a2liYW5hZWxhc3RpY3VzZXI=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: elasticsearch-kibana-user
    name: elasticsearch-kibana-user
  type: Opaque
- apiVersion: v1
  data:
    elasticsearch-kibana-password: YWRtaW4xMjM=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: elasticsearch-kibana-password
    name: elasticsearch-kibana-password
  type: Opaque
- apiVersion: v1
  data:
    elastic-bootstrap-password: YWRtaW4xMjM=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: elastic-bootstrap-password
    name: elastic-bootstrap-password
  type: Opaque
- apiVersion: v1
  data:
    logstash-keystore-password: YWRtaW4xMjM=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: logstash-keystore-password
    name: logstash-keystore-password
  type: Opaque
- apiVersion: v1
  data:
    mysql-logstash-user: bG9nc3Rhc2g=
  kind: Secret
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: mysql-logstash-user
    name: mysql-logstash-user
  type: Opaque
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f elk-docker-compose.yml convert --out deploy.yaml
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: elasticsearch
    name: elasticsearch
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: elasticsearch
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose -f elk-docker-compose.yml convert --out deploy.yaml
          kompose.version: 1.21.0 ()
        creationTimestamp: null
        labels:
          io.kompose.network/gtas-webapp-network: "true"
          io.kompose.service: elasticsearch
      spec:
        containers:
        - image: simbam1/elasticsearch:1.0.1
          imagePullPolicy: ""
          name: elasticsearch
          ports:
          - containerPort: 9300
          - containerPort: 9200
          resources: {}
          volumeMounts:
          - mountPath: /usr/share/elasticsearch/data
            name: es-data
          - mountPath: /usr/share/elasticsearch/config/
            name: elasticsearch-conf
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: es-data
          persistentVolumeClaim:
            claimName: es-data
        - name: elasticsearch-conf
          persistentVolumeClaim:
            claimName: elasticsearch-conf
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: es-data
    name: es-data
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: elasticsearch-conf
    name: elasticsearch-conf
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: gtas-webapp-network
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/gtas-webapp-network: "true"
    podSelector:
      matchLabels:
        io.kompose.network/gtas-webapp-network: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f elk-docker-compose.yml convert --out deploy.yaml
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: elk-setup
    name: elk-setup
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: elk-setup
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose -f elk-docker-compose.yml convert --out deploy.yaml
          kompose.version: 1.21.0 ()
        creationTimestamp: null
        labels:
          io.kompose.network/gtas-webapp-network: "true"
          io.kompose.service: elk-setup
      spec:
        containers:
        - env:
          - name: ELASTICSEARCH_HOST
            value: elasticsearch
          - name: KIBANA_HOST
            value: kibana
          image: simbam1/elk-setup:1.0.6
          imagePullPolicy: ""
          name: elk-setup
          resources: {}
          volumeMounts:
          - mountPath: /run/secrets/logstash-keystore-password
            name: logstash-keystore-password
          - mountPath: /run/secrets/mysql-logstash-user
            name: mysql-logstash-user
          - mountPath: /run/secrets/mysql-logstash-password
            name: mysql-logstash-password
          - mountPath: /run/secrets/elastic-password
            name: elastic-password
          - mountPath: /run/secrets/elasticsearch-kibana-user
            name: elasticsearch-kibana-user
          - mountPath: /run/secrets/elasticsearch-kibana-password
            name: elasticsearch-kibana-password
          - mountPath: /run/secrets/elastic-bootstrap-password
            name: elastic-bootstrap-password
          - mountPath: /logstash-conf
            name: logstash-conf
          - mountPath: /kibana-conf
            name: kibana-conf
          - mountPath: /elasticsearch-conf
            name: elasticsearch-conf
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: logstash-keystore-password
          secret:
            items:
            - key: logstash-keystore-password
              path: logstash-keystore-password
            secretName: logstash-keystore-password
        - name: mysql-logstash-user
          secret:
            items:
            - key: mysql-logstash-user
              path: mysql-logstash-user
            secretName: mysql-logstash-user
        - name: mysql-logstash-password
          secret:
            items:
            - key: mysql-logstash-password
              path: mysql-logstash-password
            secretName: mysql-logstash-password
        - name: elastic-password
          secret:
            items:
            - key: elastic-password
              path: elastic-password
            secretName: elastic-password
        - name: elasticsearch-kibana-user
          secret:
            items:
            - key: elasticsearch-kibana-user
              path: elasticsearch-kibana-user
            secretName: elasticsearch-kibana-user
        - name: elasticsearch-kibana-password
          secret:
            items:
            - key: elasticsearch-kibana-password
              path: elasticsearch-kibana-password
            secretName: elasticsearch-kibana-password
        - name: elastic-bootstrap-password
          secret:
            items:
            - key: elastic-bootstrap-password
              path: elastic-bootstrap-password
            secretName: elastic-bootstrap-password
        - name: logstash-conf
          persistentVolumeClaim:
            claimName: logstash-conf
        - name: kibana-conf
          persistentVolumeClaim:
            claimName: kibana-conf
        - name: elasticsearch-conf
          persistentVolumeClaim:
            claimName: elasticsearch-conf
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: logstash-conf
    name: logstash-conf
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: kibana-conf
    name: kibana-conf
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: elasticsearch-conf
    name: elasticsearch-conf
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: gtas-webapp-network
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/gtas-webapp-network: "true"
    podSelector:
      matchLabels:
        io.kompose.network/gtas-webapp-network: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f elk-docker-compose.yml convert --out deploy.yaml
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: kibana
    name: kibana
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: kibana
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose -f elk-docker-compose.yml convert --out deploy.yaml
          kompose.version: 1.21.0 ()
        creationTimestamp: null
        labels:
          io.kompose.network/gtas-webapp-network: "true"
          io.kompose.service: kibana
      spec:
        containers:
        - env:
          - name: ELASTICSEARCH_HOSTS
            value: https://elasticsearch:9200
          image: simbam1/kibana:1.0.1
          imagePullPolicy: ""
          name: kibana
          ports:
          - containerPort: 5601
          resources: {}
          volumeMounts:
          - mountPath: /usr/share/kibana/data
            name: kibana-conf
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: kibana-conf
          persistentVolumeClaim:
            claimName: kibana-conf
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: kibana-conf
    name: kibana-conf
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: gtas-webapp-network
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/gtas-webapp-network: "true"
    podSelector:
      matchLabels:
        io.kompose.network/gtas-webapp-network: "true"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose -f elk-docker-compose.yml convert --out deploy.yaml
      kompose.version: 1.21.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: logstash
    name: logstash
  spec:
    replicas: 1
    selector:
      matchLabels:
        io.kompose.service: logstash
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          kompose.cmd: kompose -f elk-docker-compose.yml convert --out deploy.yaml
          kompose.version: 1.21.0 ()
        creationTimestamp: null
        labels:
          io.kompose.network/gtas-webapp-network: "true"
          io.kompose.service: logstash
      spec:
        containers:
        - env:
          - name: ELASTIC_HOST
            value: https://elasticsearch
          - name: LOGSTASH_KEYSTORE_PASS
            value: admin123
          - name: MARIADB_HOST
            value: mariadb
          - name: XPACK_MONITORING_ELASTICSEARCH_HOSTS
            value: elasticsearch
          image: simbam1/logstash:1.0.1
          imagePullPolicy: ""
          name: logstash
          resources: {}
          volumeMounts:
          - mountPath: /run/secrets/elastic-ca
            name: elastic-ca
          - mountPath: /usr/share/logstash/config/
            name: logstash-conf
        restartPolicy: Always
        serviceAccountName: ""
        volumes:
        - name: elastic-ca
          secret:
            items:
            - key: elastic-ca
              path: elastic-ca
            secretName: elastic-ca
        - name: logstash-conf
          persistentVolumeClaim:
            claimName: logstash-conf
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: logstash-conf
    name: logstash-conf
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: extensions/v1beta1
  kind: NetworkPolicy
  metadata:
    creationTimestamp: null
    name: gtas-webapp-network
  spec:
    ingress:
    - from:
      - podSelector:
          matchLabels:
            io.kompose.network/gtas-webapp-network: "true"
    podSelector:
      matchLabels:
        io.kompose.network/gtas-webapp-network: "true"
kind: List
metadata: {}

